# -*- coding: utf-8 -*-
#Author: Jeremy Matt
#Date: 9/16/19
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl



class FIT_EXPONENTIAL:
    def __init__(self,sill,rng,nugget,gram_type):
        self.sill = sill
        self.rng = rng
        self.nugget = nugget
        self.gram_type = gram_type
        self.c1 = sill-nugget
        
    def fit(self,x_vals):
        """
        Fits an exponential model given parameters from the semivariogram
        
        INPUTS
            x_vals - numpy array of 'x' values at which to calculate the model
            sill - the point at which the semivariogram plateaus
            rng - the point at which autocorrelation plateaus
            nugget - the y-intercept of the model. The semivariance of samples 
                    collected at very short distances
            gram_type - the type of ___gram being generated ('SV','COV','COR')
        
        OUTPUTS
            expon - the exponential model
        """
        
        exponent = np.exp(-3*np.abs(x_vals)/self.rng)
        
        if self.gram_type == 'SV':
            #calculate the model y-values
            expon = self.nugget+self.c1*(1-exponent)
        elif self.gram_type == 'COV':
            expon = self.c1*exponent
        elif self.gram_type == 'COR':
            expon = self.c1*exponent/(self.sill)
        else:
            print('ERROR - invalid gram type')
            expon = np.nan
        
        return expon


def ordinary_kriging(data,x,y,grid_points,model):
    Z = []
    EV = []

    for target in grid_points:
	#Find distances to the target
    	target_dist = np.matrix(dist_to_target(data,x,y,target))
	#Get the covariances between the target and each of the data points
    	C_io = model.fit(target_dist)
	#Add the 1 coefficient for the lagrange parameter
    	C_io = np.row_stack((C_io.T,[[1]]))
	[...calculate the kriged values and the error variances and store in 
	the Z and EV lists]

    return Z, EV


#Source:
#https://scikit-learn.org/0.20/auto_examples/svm/plot_iris.html
def make_meshgrid(x, y, h=.02):
    """Create a mesh of points to plot in

    Parameters
    ----------
    x: data to base x-axis meshgrid on
    y: data to base y-axis meshgrid on
    h: stepsize for meshgrid, optional

    Returns
    -------
    xx, yy : ndarray
    """
    x_min, x_max = x.min() - 1, x.max() + 1
    y_min, y_max = y.min() - 1, y.max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    return xx, yy


#Source:
#https://scikit-learn.org/0.20/auto_examples/svm/plot_iris.html
def plot_contours(ax, Z, xx, yy, **params):
    """Plot the decision boundaries for a classifier.

    Parameters
    ----------
    ax: matplotlib axes object
    clf: a classifier
    xx: meshgrid ndarray
    yy: meshgrid ndarray
    params: dictionary of params to pass to contourf, optional
    """
    Z = np.matrix(Z)
    Z = Z.reshape(xx.shape)
    out = ax.contourf(xx, yy, Z, **params)
    return out       